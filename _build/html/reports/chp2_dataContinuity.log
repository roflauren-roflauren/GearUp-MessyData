Traceback (most recent call last):
  File "C:\Users\ad2we\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\ad2we\anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\ad2we\anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\ad2we\anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\ad2we\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\ad2we\anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ad2we\anaconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ad2we\anaconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# we need to re-shape our data b/c for LinearRegression to properly parse it: 
gas_x_vals = gas_prices.R1.values.reshape((-1, 1))
gdp_y_vals = mom_gdp.MONTHLY_NOMINAL_GDP.values

# run! that! regression! 
gdp_gas_ols = LinearRegression().fit(gas_x_vals, gdp_y_vals) # R1 - avg. of US regular grade, all formulations, retail gas prices. 
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_17228\1926337773.py[0m in [0;36m<module>[1;34m[0m
[0;32m      4[0m [1;33m[0m[0m
[0;32m      5[0m [1;31m# run! that! regression![0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 6[1;33m [0mgdp_gas_ols[0m [1;33m=[0m [0mLinearRegression[0m[1;33m([0m[1;33m)[0m[1;33m.[0m[0mfit[0m[1;33m([0m[0mgas_x_vals[0m[1;33m,[0m [0mgdp_y_vals[0m[1;33m)[0m [1;31m# R1 - avg. of US regular grade, all formulations, retail gas prices.[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32m~\AppData\Roaming\Python\Python39\site-packages\sklearn\linear_model\_base.py[0m in [0;36mfit[1;34m(self, X, y, sample_weight)[0m
[0;32m    682[0m         [0maccept_sparse[0m [1;33m=[0m [1;32mFalse[0m [1;32mif[0m [0mself[0m[1;33m.[0m[0mpositive[0m [1;32melse[0m [1;33m[[0m[1;34m"csr"[0m[1;33m,[0m [1;34m"csc"[0m[1;33m,[0m [1;34m"coo"[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0;32m    683[0m [1;33m[0m[0m
[1;32m--> 684[1;33m         X, y = self._validate_data(
[0m[0;32m    685[0m             [0mX[0m[1;33m,[0m [0my[0m[1;33m,[0m [0maccept_sparse[0m[1;33m=[0m[0maccept_sparse[0m[1;33m,[0m [0my_numeric[0m[1;33m=[0m[1;32mTrue[0m[1;33m,[0m [0mmulti_output[0m[1;33m=[0m[1;32mTrue[0m[1;33m[0m[1;33m[0m[0m
[0;32m    686[0m         )

[1;32m~\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py[0m in [0;36m_validate_data[1;34m(self, X, y, reset, validate_separately, **check_params)[0m
[0;32m    594[0m                 [0my[0m [1;33m=[0m [0mcheck_array[0m[1;33m([0m[0my[0m[1;33m,[0m [0minput_name[0m[1;33m=[0m[1;34m"y"[0m[1;33m,[0m [1;33m**[0m[0mcheck_y_params[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    595[0m             [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 596[1;33m                 [0mX[0m[1;33m,[0m [0my[0m [1;33m=[0m [0mcheck_X_y[0m[1;33m([0m[0mX[0m[1;33m,[0m [0my[0m[1;33m,[0m [1;33m**[0m[0mcheck_params[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    597[0m             [0mout[0m [1;33m=[0m [0mX[0m[1;33m,[0m [0my[0m[1;33m[0m[1;33m[0m[0m
[0;32m    598[0m [1;33m[0m[0m

[1;32m~\AppData\Roaming\Python\Python39\site-packages\sklearn\utils\validation.py[0m in [0;36mcheck_X_y[1;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[0;32m   1090[0m     [0my[0m [1;33m=[0m [0m_check_y[0m[1;33m([0m[0my[0m[1;33m,[0m [0mmulti_output[0m[1;33m=[0m[0mmulti_output[0m[1;33m,[0m [0my_numeric[0m[1;33m=[0m[0my_numeric[0m[1;33m,[0m [0mestimator[0m[1;33m=[0m[0mestimator[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1091[0m [1;33m[0m[0m
[1;32m-> 1092[1;33m     [0mcheck_consistent_length[0m[1;33m([0m[0mX[0m[1;33m,[0m [0my[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1093[0m [1;33m[0m[0m
[0;32m   1094[0m     [1;32mreturn[0m [0mX[0m[1;33m,[0m [0my[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\AppData\Roaming\Python\Python39\site-packages\sklearn\utils\validation.py[0m in [0;36mcheck_consistent_length[1;34m(*arrays)[0m
[0;32m    385[0m     [0muniques[0m [1;33m=[0m [0mnp[0m[1;33m.[0m[0munique[0m[1;33m([0m[0mlengths[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    386[0m     [1;32mif[0m [0mlen[0m[1;33m([0m[0muniques[0m[1;33m)[0m [1;33m>[0m [1;36m1[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 387[1;33m         raise ValueError(
[0m[0;32m    388[0m             [1;34m"Found input variables with inconsistent numbers of samples: %r"[0m[1;33m[0m[1;33m[0m[0m
[0;32m    389[0m             [1;33m%[0m [1;33m[[0m[0mint[0m[1;33m([0m[0ml[0m[1;33m)[0m [1;32mfor[0m [0ml[0m [1;32min[0m [0mlengths[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m

[1;31mValueError[0m: Found input variables with inconsistent numbers of samples: [213, 49]
ValueError: Found input variables with inconsistent numbers of samples: [213, 49]

